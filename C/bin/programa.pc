#include <stdio.h>
#include <string.h>
EXEC SQL INCLUDE SQLCA;

#define OK       0
#define NO_INPUT 1
#define TOO_LONG 2
static int getLine (char *prmpt, char *buff, size_t sz);

int main(void)
{
	/*
		Brogrammers Database Administrator
	*/
	
	//Zona de declaración de variables
		//Variables para C
		int option;
		char enunciado[200];
		int maximo1;

		int rc;
    	char buff[10];
		
		//Variables para SQL
		EXEC SQL BEGIN DECLARE SECTION;
		
		//Primero los structs de las tablas
		struct profesor_
		{
			VARCHAR dni[10];
			VARCHAR nombre[50];
			VARCHAR area[50];			
		}profesor;
		
		struct asignatura_
		{
			int codigo;
			VARCHAR nombre[50];
		}asignatura;

		struct imparte_
		{
			VARCHAR dni[10];
			int codasignat;
		}imparte;
		
		struct tema_
		{
			int cod_tema;
			int posicion_num;
			VARCHAR titulo[50];
			VARCHAR descr[250];
			int num_preguntas;
		}tema;

		struct formada_por_
		{
			int cod_asign;
			int cod_tema;	
		}formada_por;

		struct titulacion_
		{
			int cod_titulacion;
			VARCHAR nombre[50];
			int creditos;
		}titulacion;

		struct forma_parte_
		{
			int cod_titulacion;
			int cod_asign;			
		}forma_parte;

		struct examen_
		{
			int cod_examen;
			int convocatoria;
		}examen, examen2;

		struct examina_
		{
			int cod_examen;
			int cod_asignatura;
			int cod_tema;
		}examina;

		struct pregunta_
		{
			int cod_pregunta;
			VARCHAR enunciado[200]; //En verdad son 201 lo que hay que poner, pero queda muy largo en el print
			int num_exams;
		} pregunta, pregunta2;

		struct evalua_
		{
			int cod_tema;
			int cod_pregunta;
		}evalua;

		struct compuesta_por_
		{
			int cod_examen;
			int cod_pregunta;
			int num_correctas;
			int num_incorrectas;
			int num_nsnc;			
		}compuesta_por, compuesta_por2;

		struct opcion_
		{
			int cod_pregunta;
			int cod_opcion;
			int posicion_num;
			VARCHAR texto[50];
			VARCHAR respuesta[2];
		}opcion, opcion2;

		//Otras variables para SQL
		char enunciadoSQL[201];
		char tituloSQL[51];
		char descrSQL[251];
		int MAXIMUM;
		int MAXIMUM2;
		int MAXIMUM3;
		int CODIGOCONSULTA;
		int CODIGOCONSULTA2;
		int POSICION;

		int PREGUNTITA;
		int TEMITA;


		char oracleid[]="/";
		EXEC SQL END DECLARE SECTION;

		//Cursores para SQL
		EXEC SQL DECLARE micursor CURSOR FOR select p.Cod_Pregunta, t.Titulo, a.Nombre from Pregunta p, Tema t, Asignatura a, Formada_Por fp,  Evalua e where p.Cod_Pregunta = e.Cod_Pregunta and t.Cod_Tema = e.Cod_Tema and t.Cod_Tema = fp.Cod_Tema and a.Codigo = fp.Cod_Asign;;
		EXEC SQL DECLARE jejecursor CURSOR FOR select * from Tema;

		EXEC SQL DECLARE cursorcillo CURSOR FOR select Cod_Pregunta from Pregunta;
		EXEC SQL DECLARE cursorcillo2 CURSOR FOR select Cod_Tema from Tema;





	//Cuerpo de programa
 	printf("----------------------------------\n");
	printf("          Welcome to the:         \n");
	printf("  Brogrammers Exams Administrator \n");
	printf("----------------------------------\n");
	printf("Héctor G. A.					  \n");
	printf("Konstantin D. K.				  \n");
	printf("----------------------------------\n");
	printf("\n");
	printf("Menu:\n");
	printf("	-Funcionalidad Obligatoria (Relacionada con las preguntas)-\n");
	printf("	1 -> Listar los datos de las preguntas en la base de datos.\n");
	printf("	2 -> Dar de alta una nueva pregunta.\n");
	printf(" 	3 -> Consultar una pregunta.\n");
	printf("	4 -> Asignar una pregunta a un tema de una determinada asignatura.\n");
	printf("	-Funcionalidad extra-\n");
	printf("	5 -> Listar los datos de los temas en la base de datos.\n");
	printf("	6 -> Dar de alta un nuevo tema.\n");
	printf("	-Ayuda-\n");
	printf("	7 -> Consultar diccionario de datos.\n");
	printf("\n");

	while(option!=1 && option!=2 && option!=3 && option!=4 && option!=5 && option!=6)
	{
		fseek(stdin,0,SEEK_END); //Limpieza del buffer
		printf("Introduce una opción válida: \n");
		scanf("%d", &option);
	}
	switch (option)
	{
		case 1: //FINISHED & CLEANED
			printf("\n");
			printf("-LISTAR LAS PREGUNTAS DE LA BASE DE DATOS-\n");
			printf("\n");
			EXEC SQL CONNECT :oracleid;
			if (sqlca.sqlcode != 0) //Conexión fallida
			{
				printf("Error, conexión fallida\n");
				printf("Códigos de error de SQL: \n");
				printf("%d\n", sqlca.sqlcode);
				printf("%s\n", sqlca.sqlerrm.sqlerrmc);
				printf("Código de error -98\n");
				printf("Saliendo del programa.\n");
				return -98;
			}
			EXEC SQL OPEN micursor;

			EXEC SQL FETCH micursor
			INTO :pregunta.cod_pregunta, :tema.titulo, :asignatura.nombre;
			while (sqlca.sqlcode == 0)
			{
				printf("\n");
				printf("Pregunta = %d 	\n", pregunta.cod_pregunta);
				printf("Tema = %.*s 	\n", tema.titulo.len, tema.titulo.arr);
				printf("Asignatura = %.*s 	\n", asignatura.nombre.len, asignatura.nombre.arr);

				printf("\n");

				EXEC SQL FETCH micursor
				INTO :pregunta.cod_pregunta, :tema.titulo, :asignatura.nombre;
			}
			EXEC SQL CLOSE micursor;
			EXEC SQL COMMIT WORK RELEASE;
			break;
		case 2: //FINISHED & CLEANED
			fseek(stdin,0,SEEK_END); //Limpieza del buffer
			
			printf("\n");
			printf("-DAR DE ALTA UNA NUEVA PREGUNTA- \n");
			printf("\n");
			
			printf("Para dar de alta una nueva pregunta se necesita el enunciado\n");
			printf("Puedes introducirlo a continuación:\n");
			
				rc = getLine ("Enunciado: ", enunciadoSQL, sizeof(enunciadoSQL));
    
    			if (rc == NO_INPUT) 
    			{
        			printf("No se ha introducido ningún enunciado.\n");
        			printf("Saliendo del programa.\n");
        			printf("Código del fallo: -1\n");
        			return -1;
    			}

    			if (rc == TOO_LONG) 
    			{
    				printf("El enunciado es demasiado largo,\n");
        			printf ("Solo se mantendría: [%s]\n", enunciadoSQL);
        			printf("Saliendo del programa.\n");
        			printf("Código del fallo -2\n");
        			return -2;
    			}

    			if (strlen(enunciadoSQL)<1)
    			{
    				printf("No hay enunciado\n");
    				printf("Saliendo del programa.\n");
    				printf("Código de fallo: -3\n");
    				return -3;
    			}
    			

    		printf ("OK [%s]\n", enunciadoSQL);

			//Consulta para hallar el max
			fseek(stdin,0,SEEK_END); //Limpieza del buffer
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL select max(Cod_Pregunta) into :MAXIMUM2 from pregunta;
				

				EXEC SQL insert into pregunta values (:MAXIMUM2+1, :enunciadoSQL, 0);
				printf("Inserción realizada con éxito\n");
				printf("ID de la pregunta insertada: %d\n", MAXIMUM2+1);

				EXEC SQL COMMIT WORK RELEASE;
			
			
			break;
		case 3://FINISHED & CLEAN
			fseek(stdin,0,SEEK_END); //Limpieza del buffer
			printf("\n");
			printf("-MOSTRAR TODOS LOS DATOS DE UNA PREGUNTA A PARTIR DE SU CÓDIGO- \n");
			printf("\n");
			
			CODIGOCONSULTA = -1;
			//Consulta para hallar el max
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL select max(Cod_Pregunta) into :MAXIMUM from pregunta;
				
				EXEC SQL COMMIT WORK RELEASE;
			do
			{
				printf("Elige un código del 1 al ");
				printf("%d\n", MAXIMUM);
				scanf("%d", &CODIGOCONSULTA);
			}while(CODIGOCONSULTA > MAXIMUM);
			
			//Obtener todo lo de pregunta
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL select * into :pregunta from pregunta where cod_pregunta = :CODIGOCONSULTA;
				EXEC SQL COMMIT WORK RELEASE;

				printf("\n");
				printf("Pregunta seleccionada:\n");
				printf("Codigo: %d \n", pregunta.cod_pregunta);
				printf("Enunciado = %.*s 	\n", pregunta.enunciado.len, pregunta.enunciado.arr);
				printf("Número de exámenes en los que aparece: %d \n", pregunta.num_exams);

				//Select sobre evalua
				EXEC SQL DECLARE cursorevalua CURSOR FOR select * from Evalua e where e.Cod_Pregunta = :pregunta.cod_pregunta;
				printf("Temas que evalua la pregunta seleccionada:\n");			
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL OPEN cursorevalua;

				EXEC SQL FETCH cursorevalua
				INTO :evalua;
				while (sqlca.sqlcode == 0)
				{
					printf("\n");
					printf("Tema = %d\n", evalua.cod_tema);

					EXEC SQL FETCH cursorevalua
					INTO :evalua;
				}
				EXEC SQL CLOSE cursorevalua;
				EXEC SQL COMMIT WORK RELEASE;

				//Select sobre Compuesta_Por
				EXEC SQL DECLARE cursorcompuestapor CURSOR FOR select * from Compuesta_Por cp where cp.Cod_Pregunta = :pregunta.cod_pregunta;
				printf("Exámenes que incluyen la pregunta:\n");			
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL OPEN cursorcompuestapor;

				EXEC SQL FETCH cursorcompuestapor
				INTO :compuesta_por;
				while (sqlca.sqlcode == 0)
				{
					printf("\n");
					printf("Exámen: %d\n", compuesta_por.cod_examen);
					printf("Número de respuestas correctas: %d \n", compuesta_por.num_correctas);
					printf("Número de respuestas incorrectas: %d\n", compuesta_por.num_incorrectas);
					printf("Número de respuestas no sabe no contesta: %d\n", compuesta_por.num_nsnc);

					EXEC SQL FETCH cursorcompuestapor
					INTO :evalua;
				}
				EXEC SQL CLOSE cursorcompuestapor;
				EXEC SQL COMMIT WORK RELEASE;

			//Select sobre Opcion
				EXEC SQL DECLARE cursoropcion CURSOR FOR select * from Opcion o where o.Cod_Pregunta = :pregunta.cod_pregunta;
				printf("Opciones que contiene la pregunta:\n");			
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL OPEN cursoropcion;

				EXEC SQL FETCH cursoropcion
				INTO :opcion;
				while (sqlca.sqlcode == 0)
				{
					printf("\n");
					printf("Opcion: %d\n", opcion.cod_opcion);
					printf("Posición: %d \n", opcion.posicion_num);
					printf("Texto: %.*s \n", opcion.texto.len, opcion.texto.arr);
					printf("Respuesta: %.*s \n", opcion.respuesta.len, opcion.respuesta.arr);
					printf("\n");
					EXEC SQL FETCH cursoropcion
					INTO :opcion;
				}
				EXEC SQL CLOSE cursoropcion;
				EXEC SQL COMMIT WORK RELEASE;


			break;
		case 4://FINISHED & CLEAN
			printf("\n");
			printf("-ASIGNAR UNA PREGUNTA A UN TEMA DE UNA DETERMINADA ASIGNATURA-\n");
			printf("\n");

			printf("A continuación se muestra un listado de los códigos de las preguntas disponibles.\n");
			EXEC SQL CONNECT :oracleid;
			if (sqlca.sqlcode != 0) //Conexión fallida
			{
				printf("Error, conexión fallida\n");
				printf("Códigos de error de SQL: \n");
				printf("%d\n", sqlca.sqlcode);
				printf("%s\n", sqlca.sqlerrm.sqlerrmc);
				printf("Código de error -98\n");
				printf("Saliendo del programa.\n");
				return -98;
			}
			EXEC SQL OPEN cursorcillo;

			EXEC SQL FETCH cursorcillo
			INTO :pregunta.cod_pregunta;
			while (sqlca.sqlcode == 0)
			{
				printf("\n");
				printf("Pregunta = %d 	\n", pregunta.cod_pregunta);

				printf("\n");

				EXEC SQL FETCH cursorcillo
				INTO :pregunta.cod_pregunta;
			}
			EXEC SQL CLOSE cursorcillo;
			EXEC SQL COMMIT WORK RELEASE;
			
			printf("A continuación se muestra la lista de temas\n");
			EXEC SQL CONNECT :oracleid;
			if (sqlca.sqlcode != 0) //Conexión fallida
			{
				printf("Error, conexión fallida\n");
				printf("Códigos de error de SQL: \n");
				printf("%d\n", sqlca.sqlcode);
				printf("%s\n", sqlca.sqlerrm.sqlerrmc);
				printf("Código de error -98\n");
				printf("Saliendo del programa.\n");
				return -98;
			}
			EXEC SQL OPEN cursorcillo2;

			EXEC SQL FETCH cursorcillo2
			INTO :tema.cod_tema;
			while (sqlca.sqlcode == 0)
			{
				printf("\n");
				printf("Tema = %d 	\n", tema.cod_tema);
				

				printf("\n");

				EXEC SQL FETCH cursorcillo2
				INTO :tema.cod_tema;
			}
			EXEC SQL CLOSE cursorcillo2;
			EXEC SQL COMMIT WORK RELEASE;

			
			CODIGOCONSULTA = -1;
			//Consulta para hallar el max
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL select max(Cod_Pregunta) into :MAXIMUM from pregunta;
				
				EXEC SQL COMMIT WORK RELEASE;

			CODIGOCONSULTA2 = -1;
			//Consulta para hallar el max
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL select max(Cod_Tema) into :MAXIMUM2 from tema;
				
				EXEC SQL COMMIT WORK RELEASE;
			do
			{
				printf("Elige un código de pregunta del 1 al ");
				printf("%d\n", MAXIMUM);
				fseek(stdin,0,SEEK_END); //Limpieza del buffer
				scanf("%d", &PREGUNTITA);
			}while (PREGUNTITA > MAXIMUM);
			do
			{
				printf("Elige un código de tema del 1 al ");
				printf("%d\n", MAXIMUM2);
				fseek(stdin,0,SEEK_END); //Limpieza del buffer
				scanf("%d", &TEMITA);
			}while (TEMITA > MAXIMUM2);
			

			printf("Has seleccionado la pregunta %d y el tema %d\n", PREGUNTITA, TEMITA);
			
			fseek(stdin,0,SEEK_END); //Limpieza del buffer
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				
				EXEC SQL insert into evalua values (:TEMITA, :PREGUNTITA);
				printf("Inserción realizada con éxito\n");

				EXEC SQL COMMIT WORK RELEASE;
			

			break;
		case 5://FINISHED & CLEAN
			printf("\n");
			printf("-LISTADO DE LOS TEMAS EN LA BASE DE DATOS- \n");
			printf("\n");
			
			EXEC SQL CONNECT :oracleid;
			if (sqlca.sqlcode != 0) //Conexión fallida
			{
				printf("Error, conexión fallida\n");
				printf("Códigos de error de SQL: \n");
				printf("%d\n", sqlca.sqlcode);
				printf("%s\n", sqlca.sqlerrm.sqlerrmc);
				printf("Código de error -98\n");
				printf("Saliendo del programa.\n");
				return -98;
			}
			EXEC SQL OPEN jejecursor;

			EXEC SQL FETCH jejecursor
			INTO :tema;
			while (sqlca.sqlcode == 0)
			{
				printf("\n");
				printf("Tema:\n");
				printf("Código = %d 	\n", tema.cod_tema);
				printf("Posición = %d 	\n", tema.posicion_num);
				printf("Título = %.*s 	\n", tema.titulo.len, tema.titulo.arr);
				printf("Descripción = %.*s 	\n", tema.descr.len, tema.descr.arr);
				printf("Número de preguntas = %d 	\n", tema.num_preguntas);
				printf("\n");

				EXEC SQL FETCH jejecursor
				INTO :tema;
			}
			EXEC SQL CLOSE jejecursor;
			EXEC SQL COMMIT WORK RELEASE;
			break;
		case 6://FINISHED & CLEANED
			fseek(stdin,0,SEEK_END); //Limpieza del buffer
			
			printf("\n");
			printf("-DAR DE ALTA UN NUEVO TEMA- \n");
			printf("\n");
			
			printf("Para dar de alta un nuevo tema se necesita el título, la descipción y su posición\n");
			printf("Se solicitarán los datos a continuación:\n");
			
				rc = getLine ("Título (max 50): ", tituloSQL, sizeof(tituloSQL));
    
    			if (rc == NO_INPUT) 
    			{
        			printf("No se ha introducido ningún título.\n");
        			printf("Saliendo del programa.\n");
        			printf("Código del fallo: -1\n");
        			return -1;
    			}

    			if (rc == TOO_LONG) 
    			{
    				printf("El título es demasiado largo,\n");
        			printf ("Solo se mantendría: [%s]\n", tituloSQL);
        			printf("Saliendo del programa.\n");
        			printf("Código del fallo -2\n");
        			return -2;
    			}

    			if (strlen(tituloSQL)<1)
    			{
    				printf("No hay título\n");
    				printf("Saliendo del programa.\n");
    				printf("Código de fallo: -3\n");
    				return -3;
    			}

    			rc = getLine ("Descripción (max 250): ", descrSQL, sizeof(descrSQL));
    
    			if (rc == NO_INPUT) 
    			{
        			printf("No se ha introducido ningún título.\n");
        			printf("Saliendo del programa.\n");
        			printf("Código del fallo: -1\n");
        			return -1;
    			}

    			if (rc == TOO_LONG) 
    			{
    				printf("El título es demasiado largo,\n");
        			printf ("Solo se mantendría: [%s]\n", descrSQL);
        			printf("Saliendo del programa.\n");
        			printf("Código del fallo -2\n");
        			return -2;
    			}

    			if (strlen(descrSQL)<1)
    			{
    				printf("No hay título\n");
    				printf("Saliendo del programa.\n");
    				printf("Código de fallo: -3\n");
    				return -3;
    			}

    			printf("Posición: ");
    			scanf("%d", &POSICION);
    			

    		printf("Título introducido: %s\n", tituloSQL);
    		printf("Descripción introducida:%s\n", descrSQL);
    		printf("Posición introducida: %d\n", POSICION);

    		
			//Consulta para hallar el max e insertar
				fseek(stdin,0,SEEK_END); //Limpieza del buffer
				EXEC SQL CONNECT :oracleid;
				if (sqlca.sqlcode != 0) //Conexión fallida
				{
					printf("Error, conexión fallida\n");
					printf("Códigos de error de SQL: \n");
					printf("%d\n", sqlca.sqlcode);
					printf("%s\n", sqlca.sqlerrm.sqlerrmc);
					printf("Código de error -98\n");
					printf("Saliendo del programa.\n");
					return -98;
				}
				EXEC SQL select max(Cod_Tema) into :MAXIMUM3 from tema;
				
				EXEC SQL insert into tema values (:MAXIMUM3+1, :POSICION, :enunciadoSQL, :descrSQL, 0);
				printf("Inserción realizada con éxito\n");
				printf("ID del tema insertado: %d\n", MAXIMUM3+1);

				EXEC SQL COMMIT WORK RELEASE;
			
			break;
		case 7:
			printf("Diccionario de fallos\n");
			printf("	-1 = Enunciado no introducido\n");
			printf("    -2 = Enunciado demasiado largo\n");
			printf("	-3 = Enunciado vacío\n");
			printf("\n");
			printf("	-98 = Error de conexión SQL\n");
			printf("	-99 = Opción elegida no válida\n");
			break;
		default:
			printf("Código de fallo: -99\n");
			printf("La opción introducida no es válida\n");
			return(-99);
	}
	return 0;
}

static int getLine (char *prmpt, char *buff, size_t sz) //FUNCION UTILIZADA PARA ESCANEAR CARACTÉRES
{
    int ch, extra;

    // Get line with buffer overrun protection.
    if (prmpt != NULL) {
        printf ("%s", prmpt);
        fflush (stdout);
    }
    if (fgets (buff, sz, stdin) == NULL)
        return NO_INPUT;

    // If it was too long, there'll be no newline. In that case, we flush
    // to end of line so that excess doesn't affect the next call.
    if (buff[strlen(buff)-1] != '\n') {
        extra = 0;
        while (((ch = getchar()) != '\n') && (ch != EOF))
            extra = 1;
        return (extra == 1) ? TOO_LONG : OK;
    }

    // Otherwise remove newline and give string back to caller.
    buff[strlen(buff)-1] = '\0';
    return OK;
}